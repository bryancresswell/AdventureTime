module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig rst;              // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      fsm states = {BEGIN, START, IDLE, SCORE};    
      pn_gen rngesus;
      dff hp[8];  
    }    
    counter timingCounter (#SIZE(4), #TOP(9), #DIV(25));
  }
  
  sevenseg seg (.dot(0));
  
  sig alu[8];  
  main alu1;  
  sig p[8];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;
    rngesus.seed = 0;
    rngesus.next = 0;
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;              // select no digits
    timingCounter.rst = 1;        
    seg.char = 0;
    io_seg = ~seg.segs;
    hp.d = 8b11111111;
    io_sel = ~4h1;
    io_led[0] = hp.q;
    alu = alu1.alu;    
    p = io_dip[1];
    if (states.q == states.BEGIN) {    
      if (io_button[1]) { 
        states.d = states.START;    
      }
    }
    else if (states.q == states.START) {
      timingCounter.rst = 0;
      seg.char = 8 - timingCounter.value;
      io_led[0] = hp.q;     
       case (rngesus.num[17:16]) { // multiply   
        b01:
          alu1.alufn = b000010;  // configures them to have these values now
          alu1.a = rngesus.num[3:0];
          alu1.b = rngesus.num[7:4];
        b00: // add block      
          alu1.alufn = b000000;
          alu1.a = rngesus.num[7:0];
          alu1.b = rngesus.num[15:8];
        b01:
          if (rngesus.num[7:0] < rngesus.num[15:8]) { // subtract block swap posoition if first 8 smaller than next 8 (prevent negatives)        
            alu1.alufn = b000001;
            alu1.a = rngesus.num[15:8];
            alu1.b = rngesus.num[7:0];
          } 
          else { // subtract block       
            alu1.alufn = b000001;
            alu1.a = rngesus.num[15:8];
            alu1.b = rngesus.num[7:0];
          }
          default:
            alu1.alufn = b000000;
            alu1.a = rngesus.num[6:0];
            alu1.b = rngesus.num[13:7];   
        }
        if (p == alu && io_dip[2][0] == 1) {
          states.d = states.IDLE;
        }
        else if (p != alu && io_dip[2][0] == 1) {
          states.d = states.SCORE;
        }
        else if (timingCounter.value == 9) {
          states.d = states.SCORE;
        }
      } 
    else if (states.q == states.IDLE) {
      led[1] = 1;
      io_led[0] = hp.q;
      if (io_button[2] ) {
        states.d = states.START;
        rngesus.next = 1;
      }
    }
    else if (states.q == states.SCORE) {
      led[2] = 1;          
      if (io_button[3]) {
        hp.d = hp.q >> 2; 
        states.d = states.START;
        rngesus.next = 1;
      }
    } 
  }  
}      
