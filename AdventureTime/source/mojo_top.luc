module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig rst;              // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector ed (#RISE(1), #FALL(0));
    .rst(rst) {
      fsm states = {START, IDLE};
      pn_gen rngesus;
      multi_seven_seg seg (#DIGITS(2));
      multi_dec_ctr dec_ctr (#DIGITS(2));
      counter ctr (#SIZE(1), #DIV(25), #TOP(20));
    }
  }
  

  sig alufn[6];
  sig a[8];
  sig b[8];
  sig alu[8];  
  
  main alu1; 
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;
    rngesus.seed = 0;
    rngesus.next = 0;
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;
    seg.values = {4h3, 4h1};           // select no digits
    alu1.alufn = 0; // Sets alufn, a and b as 0 values on initializing
    alu1.a = 0;
    alu1.b = 0;
    alu = alu1.alu;
    ed.in = ctr.value;
    dec_ctr.inc = ed.out;
    seg.values = dec_ctr.digits;
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    if (seg.seg[1] == 2 && seg.seg[0] == 0) {
      states.d = states.IDLE;
    }
    
    /* if (states.q == states.START) {
      led = rngesus.num[21:16];
       if (rngesus.num[21:16] == b000010) { // multiply
        timingCounter.rst = 0;
        seg.char = 9 - timingCounter.value;
        alu1.alufn = b000010;  // configures them to have these values now
        alu1.a = rngesus.num[3:0];
        alu1.b = rngesus.num[7:4];
        alu = alu1.alu;
        io_led[0] = rngesus.num[3:0];
        io_led[1] = b000010; 
        io_led[2] = rngesus.num[7:4];
        if (timingCounter.value < 9 && io_dip[1] == alu) {
          states.d = states.IDLE;
          led[0] = 1;
        }
        else if (timingCounter.value == 9) {
          states.d = states.IDLE;
        }
      }
      else if (rngesus.num[21:16] == b000000) { // add block
        timingCounter.rst = 0;
        seg.char = 9 - timingCounter.value;
        alu1.alufn = rngesus.num[21:16];
        alu1.a = rngesus.num[7:0];
        alu1.b = rngesus.num[15:8];
        alu = alu1.alu;
        io_led[0] = rngesus.num[7:0];
        io_led[1] = rngesus.num[21:16];  
        io_led[2] = rngesus.num[15:8]; // test purposes
        if (timingCounter.value < 9 && io_dip[1] == alu) {
          states.d = states.IDLE;
          led[0] = 1;
        }
        else if (timingCounter.value == 9) {
          states.d = states.IDLE;
        }
      }
      else if (rngesus.num[21:16] == b000001) {
        if (rngesus.num[7:0] < rngesus.num[15:8]) { // subtract block swap posoition if first 8 smaller than next 8 (prevent negatives)
          timingCounter.rst = 0;
          seg.char = 9 - timingCounter.value;
          alu1.alufn = rngesus.num[21:16];
          alu1.a = rngesus.num[15:8];
          alu1.b = rngesus.num[7:0];
          alu = alu1.alu;
          io_led[2] = rngesus.num[7:0];
          io_led[1] = rngesus.num[21:16];
          io_led[0] = rngesus.num[15:8]; // test purposes
          if (timingCounter.value < 9 && io_dip[1] == alu) {
            states.d = states.IDLE;
            led[0] = 1;
          }
          else if (timingCounter.value == 9) {
            states.d = states.IDLE;
          }    
        } 
        else { // subtract block
          timingCounter.rst = 0;
          seg.char = 9 - timingCounter.value;
          alu1.alufn = rngesus.num[21:16];
          alu1.a = rngesus.num[15:8];
          alu1.b = rngesus.num[7:0];
          alu = alu1.alu;
          io_led[0] = rngesus.num[7:0];
          io_led[1] = rngesus.num[21:16];
          io_led[2] = rngesus.num[15:8]; // test purposes
          if (timingCounter.value < 9 && io_dip[1] == alu) {
            states.d = states.IDLE;
            led[0] = 1;
          }
          else if (timingCounter.value == 9) {
            states.d = states.IDLE;
          }  
        }    
      }
      else {
        rngesus.next = 1;
      }
    } 
   */ else if (states.q == states.IDLE) {
      if ( io_button[1] ) {
        states.d = states.START;
        rngesus.next = 1;
      }
    }
  }  
}        