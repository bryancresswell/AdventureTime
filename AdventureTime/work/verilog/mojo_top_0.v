/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_ed_out;
  reg [1-1:0] M_ed_in;
  edge_detector_2 ed (
    .clk(clk),
    .in(M_ed_in),
    .out(M_ed_out)
  );
  localparam START_states = 1'd0;
  localparam IDLE_states = 1'd1;
  
  reg M_states_d, M_states_q = START_states;
  wire [32-1:0] M_rngesus_num;
  reg [1-1:0] M_rngesus_next;
  reg [32-1:0] M_rngesus_seed;
  pn_gen_3 rngesus (
    .clk(clk),
    .rst(rst),
    .next(M_rngesus_next),
    .seed(M_rngesus_seed),
    .num(M_rngesus_num)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [8-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_5 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_6 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] alu;
  
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  wire [1-1:0] M_alu1_subtractionOverFLow;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  main_7 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n),
    .subtractionOverFLow(M_alu1_subtractionOverFLow)
  );
  
  always @* begin
    M_states_d = M_states_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_rngesus_seed = 1'h0;
    M_rngesus_next = 1'h0;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 8'h31;
    M_alu1_alufn = 1'h0;
    M_alu1_a = 1'h0;
    M_alu1_b = 1'h0;
    alu = M_alu1_alu;
    M_ed_in = M_ctr_value;
    M_dec_ctr_inc = M_ed_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    if (M_seg_seg[1+0-:1] == 2'h2 && M_seg_seg[0+0-:1] == 1'h0) begin
      M_states_d = IDLE_states;
    end else begin
      if (M_states_q == IDLE_states) begin
        if (io_button[1+0-:1]) begin
          M_states_d = START_states;
          M_rngesus_next = 1'h1;
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_states_q <= 1'h0;
    end else begin
      M_states_q <= M_states_d;
    end
  end
  
endmodule
