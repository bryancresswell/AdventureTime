/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    input [4:0] io_button,
    output reg [7:0] a_seg,
    output reg [3:0] a_sel,
    output reg [7:0] b_seg,
    output reg [3:0] b_sel,
    output reg [7:0] op_seg,
    output reg [7:0] timer_seg,
    output reg [7:0] timer_sel,
    input enterbuttons,
    input resetbuttons,
    input buttons0,
    input buttons1,
    input buttons2,
    input buttons3,
    input buttons4,
    input buttons5,
    input buttons6,
    input buttons7
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [16-1:0] M_digitsa_digits;
  reg [14-1:0] M_digitsa_value;
  bin_to_dec_2 digitsa (
    .clk(clk),
    .value(M_digitsa_value),
    .digits(M_digitsa_digits)
  );
  wire [16-1:0] M_digitsb_digits;
  reg [14-1:0] M_digitsb_value;
  bin_to_dec_2 digitsb (
    .clk(clk),
    .value(M_digitsb_value),
    .digits(M_digitsb_digits)
  );
  wire [16-1:0] M_digitst_digits;
  reg [14-1:0] M_digitst_value;
  bin_to_dec_2 digitst (
    .clk(clk),
    .value(M_digitst_value),
    .digits(M_digitst_digits)
  );
  localparam BEGIN_states = 3'd0;
  localparam START_states = 3'd1;
  localparam IDLE_states = 3'd2;
  localparam LEVEL_states = 3'd3;
  localparam SCORE_states = 3'd4;
  localparam OVER_states = 3'd5;
  
  reg [2:0] M_states_d, M_states_q = BEGIN_states;
  localparam EIGHT_hp = 3'd0;
  localparam ONE_hp = 3'd1;
  localparam TWO_hp = 3'd2;
  localparam THREE_hp = 3'd3;
  localparam FOUR_hp = 3'd4;
  localparam FIVE_hp = 3'd5;
  localparam SIX_hp = 3'd6;
  localparam SEVEN_hp = 3'd7;
  
  reg [2:0] M_hp_d, M_hp_q = EIGHT_hp;
  localparam ONE_level = 3'd0;
  localparam TWO_level = 3'd1;
  localparam THREE_level = 3'd2;
  localparam FOUR_level = 3'd3;
  localparam FIVE_level = 3'd4;
  localparam SIX_level = 3'd5;
  
  reg [2:0] M_level_d, M_level_q = ONE_level;
  wire [32-1:0] M_rngesus_num;
  reg [1-1:0] M_rngesus_next;
  reg [32-1:0] M_rngesus_seed;
  pn_gen_5 rngesus (
    .clk(clk),
    .rst(rst),
    .next(M_rngesus_next),
    .seed(M_rngesus_seed),
    .num(M_rngesus_num)
  );
  wire [7-1:0] M_msega_seg;
  wire [4-1:0] M_msega_sel;
  reg [16-1:0] M_msega_values;
  multi_seven_seg_6 msega (
    .clk(clk),
    .rst(rst),
    .values(M_msega_values),
    .seg(M_msega_seg),
    .sel(M_msega_sel)
  );
  wire [7-1:0] M_msegb_seg;
  wire [4-1:0] M_msegb_sel;
  reg [16-1:0] M_msegb_values;
  multi_seven_seg_6 msegb (
    .clk(clk),
    .rst(rst),
    .values(M_msegb_values),
    .seg(M_msegb_seg),
    .sel(M_msegb_sel)
  );
  wire [7-1:0] M_msegt_seg;
  wire [4-1:0] M_msegt_sel;
  reg [16-1:0] M_msegt_values;
  multi_seven_seg_6 msegt (
    .clk(clk),
    .rst(rst),
    .values(M_msegt_values),
    .seg(M_msegt_seg),
    .sel(M_msegt_sel)
  );
  wire [1-1:0] M_button0_count;
  reg [1-1:0] M_button0_button;
  buttonCounter_9 button0 (
    .clk(clk),
    .rst(rst),
    .button(M_button0_button),
    .count(M_button0_count)
  );
  wire [1-1:0] M_button1_count;
  reg [1-1:0] M_button1_button;
  buttonCounter_9 button1 (
    .clk(clk),
    .rst(rst),
    .button(M_button1_button),
    .count(M_button1_count)
  );
  wire [1-1:0] M_button2_count;
  reg [1-1:0] M_button2_button;
  buttonCounter_9 button2 (
    .clk(clk),
    .rst(rst),
    .button(M_button2_button),
    .count(M_button2_count)
  );
  wire [1-1:0] M_button3_count;
  reg [1-1:0] M_button3_button;
  buttonCounter_9 button3 (
    .clk(clk),
    .rst(rst),
    .button(M_button3_button),
    .count(M_button3_count)
  );
  wire [1-1:0] M_button4_count;
  reg [1-1:0] M_button4_button;
  buttonCounter_9 button4 (
    .clk(clk),
    .rst(rst),
    .button(M_button4_button),
    .count(M_button4_count)
  );
  wire [1-1:0] M_button5_count;
  reg [1-1:0] M_button5_button;
  buttonCounter_9 button5 (
    .clk(clk),
    .rst(rst),
    .button(M_button5_button),
    .count(M_button5_count)
  );
  wire [1-1:0] M_button6_count;
  reg [1-1:0] M_button6_button;
  buttonCounter_9 button6 (
    .clk(clk),
    .rst(rst),
    .button(M_button6_button),
    .count(M_button6_count)
  );
  wire [1-1:0] M_button7_count;
  reg [1-1:0] M_button7_button;
  buttonCounter_9 button7 (
    .clk(clk),
    .rst(rst),
    .button(M_button7_button),
    .count(M_button7_count)
  );
  wire [8-1:0] M_flashMyLED_out;
  wave_17 flashMyLED (
    .clk(clk),
    .rst(rst),
    .out(M_flashMyLED_out)
  );
  wire [1-1:0] M_enterbutton_count;
  reg [1-1:0] M_enterbutton_rst;
  reg [1-1:0] M_enterbutton_button;
  buttonCounter_9 enterbutton (
    .clk(clk),
    .rst(M_enterbutton_rst),
    .button(M_enterbutton_button),
    .count(M_enterbutton_count)
  );
  wire [1-1:0] M_resetbutton_count;
  reg [1-1:0] M_resetbutton_rst;
  reg [1-1:0] M_resetbutton_button;
  buttonCounter_9 resetbutton (
    .clk(clk),
    .rst(M_resetbutton_rst),
    .button(M_resetbutton_button),
    .count(M_resetbutton_count)
  );
  wire [6-1:0] M_timingCounter1_value;
  reg [1-1:0] M_timingCounter1_rst;
  counter_20 timingCounter1 (
    .clk(clk),
    .rst(M_timingCounter1_rst),
    .value(M_timingCounter1_value)
  );
  wire [5-1:0] M_timingCounter2_value;
  reg [1-1:0] M_timingCounter2_rst;
  counter_21 timingCounter2 (
    .clk(clk),
    .rst(M_timingCounter2_rst),
    .value(M_timingCounter2_value)
  );
  wire [5-1:0] M_timingCounter3_value;
  reg [1-1:0] M_timingCounter3_rst;
  counter_22 timingCounter3 (
    .clk(clk),
    .rst(M_timingCounter3_rst),
    .value(M_timingCounter3_value)
  );
  wire [5-1:0] M_timingCounter4_value;
  reg [1-1:0] M_timingCounter4_rst;
  counter_23 timingCounter4 (
    .clk(clk),
    .rst(M_timingCounter4_rst),
    .value(M_timingCounter4_value)
  );
  
  wire [8-1:0] M_opseg_segs;
  reg [4-1:0] M_opseg_char;
  operatorseg_24 opseg (
    .char(M_opseg_char),
    .segs(M_opseg_segs)
  );
  
  reg [1:0] op;
  
  reg [7:0] alu;
  
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  wire [1-1:0] M_alu1_subtractionOverFLow;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  main_25 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n),
    .subtractionOverFLow(M_alu1_subtractionOverFLow)
  );
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] sol;
  
  reg [7:0] result;
  
  always @* begin
    M_hp_d = M_hp_q;
    M_level_d = M_level_q;
    M_states_d = M_states_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_rngesus_seed = 1'h0;
    M_rngesus_next = 1'h0;
    io_led = 24'h000000;
    M_timingCounter1_rst = 1'h1;
    M_timingCounter2_rst = 1'h1;
    M_timingCounter3_rst = 1'h1;
    M_timingCounter4_rst = 1'h1;
    M_alu1_a = 1'h0;
    M_alu1_b = 1'h0;
    alu = M_alu1_alu;
    sol = 1'h0;
    result = 1'h0;
    a_seg = 8'hff;
    a_sel = 4'hf;
    b_seg = 8'hff;
    b_sel = 4'hf;
    M_alu1_alufn = 1'h0;
    M_alu1_a = 1'h0;
    M_alu1_b = 1'h0;
    alu = M_alu1_alu;
    M_timingCounter1_rst = 1'h1;
    M_timingCounter2_rst = 1'h1;
    M_timingCounter3_rst = 1'h1;
    M_timingCounter4_rst = 1'h1;
    M_digitsa_value = 1'h0;
    M_msega_values = M_digitsa_digits;
    a_seg = M_flashMyLED_out;
    a_sel = 4'h0;
    M_digitsb_value = 1'h0;
    M_msegb_values = M_digitsb_digits;
    b_seg = M_flashMyLED_out;
    b_sel = 4'h0;
    M_digitst_value = 1'h0;
    M_msegt_values = M_digitst_digits;
    timer_seg = M_flashMyLED_out;
    timer_sel = 4'h0;
    M_opseg_char = 1'h0;
    op_seg = M_opseg_segs;
    M_button0_button = ~buttons0;
    M_button1_button = ~buttons1;
    M_button2_button = ~buttons2;
    M_button3_button = ~buttons3;
    M_button4_button = ~buttons4;
    M_button5_button = ~buttons5;
    M_button6_button = ~buttons6;
    M_button7_button = ~buttons7;
    M_button7_button = ~buttons7;
    M_enterbutton_button = ~enterbuttons;
    M_enterbutton_rst = 1'h0;
    M_resetbutton_button = ~resetbuttons;
    M_resetbutton_rst = 1'h0;
    io_led[0+7-:8] = M_flashMyLED_out;
    io_led[8+7-:8] = M_flashMyLED_out;
    io_led[16+7-:8] = M_flashMyLED_out;
    
    case (M_states_q)
      BEGIN_states: begin
        if (M_enterbutton_count) begin
          M_states_d = START_states;
          M_rngesus_seed = M_rngesus_num[0+31-:32];
          M_rngesus_next = 1'h1;
          M_enterbutton_rst = 1'h1;
        end
      end
      START_states: begin
        
        case (M_hp_q)
          EIGHT_hp: begin
            io_led[0+7-:8] = 8'hff;
          end
          SEVEN_hp: begin
            io_led[0+7-:8] = 8'h7f;
          end
          SIX_hp: begin
            io_led[0+7-:8] = 8'h3f;
          end
          FIVE_hp: begin
            io_led[0+7-:8] = 8'h1f;
          end
          FOUR_hp: begin
            io_led[0+7-:8] = 8'h0f;
          end
          THREE_hp: begin
            io_led[0+7-:8] = 8'h07;
          end
          TWO_hp: begin
            io_led[0+7-:8] = 8'h03;
          end
          ONE_hp: begin
            io_led[0+7-:8] = 8'h01;
          end
        endcase
        
        case (M_level_q)
          ONE_level: begin
            io_led[8+7-:8] = 8'h01;
          end
          TWO_level: begin
            io_led[8+7-:8] = 8'h03;
          end
          THREE_level: begin
            io_led[8+7-:8] = 8'h07;
          end
          FOUR_level: begin
            io_led[8+7-:8] = 8'h0f;
          end
          FIVE_level: begin
            io_led[8+7-:8] = 8'h1f;
          end
        endcase
        op = M_rngesus_num[16+1-:2];
        
        case (op)
          2'h1: begin
            M_alu1_alufn = 6'h02;
            a = M_rngesus_num[0+3-:4];
            b = M_rngesus_num[4+3-:4];
            result = a * b;
          end
          2'h0: begin
            M_alu1_alufn = 6'h00;
            a = M_rngesus_num[0+6-:7];
            b = M_rngesus_num[8+6-:7];
            result = a + b;
          end
          2'h2: begin
            if (M_rngesus_num[0+7-:8] < M_rngesus_num[8+7-:8]) begin
              M_alu1_alufn = 6'h01;
              a = M_rngesus_num[8+6-:7];
              b = M_rngesus_num[0+6-:7];
              result = a - b;
            end else begin
              M_alu1_alufn = 6'h01;
              b = M_rngesus_num[8+7-:8];
              a = M_rngesus_num[0+7-:8];
              result = a - b;
            end
          end
          default: begin
            M_alu1_alufn = 6'h00;
            a = M_rngesus_num[0+6-:7];
            b = M_rngesus_num[7+6-:7];
            result = a + b;
          end
        endcase
        M_alu1_a = a;
        M_alu1_b = b;
        alu = M_alu1_alu;
        M_digitsa_value = a;
        M_digitsb_value = b;
        M_msega_values = M_digitsa_digits;
        M_msegb_values = M_digitsb_digits;
        a_seg = M_msega_seg;
        b_seg = M_msegb_seg;
        a_sel = ~M_msega_sel;
        b_sel = ~M_msegb_sel;
        M_opseg_char = op;
        op_seg = M_opseg_segs;
        M_button0_button = ~buttons0;
        io_led[16+0+0-:1] = M_button0_count;
        M_button1_button = ~buttons1;
        io_led[16+1+0-:1] = M_button1_count;
        M_button2_button = ~buttons2;
        io_led[16+2+0-:1] = M_button2_count;
        M_button3_button = ~buttons3;
        io_led[16+3+0-:1] = M_button3_count;
        M_button4_button = ~buttons4;
        io_led[16+4+0-:1] = M_button4_count;
        M_button5_button = ~buttons5;
        io_led[16+5+0-:1] = M_button5_count;
        M_button6_button = ~buttons6;
        io_led[16+6+0-:1] = M_button6_count;
        M_button7_button = ~buttons7;
        io_led[16+7+0-:1] = M_button7_count;
        M_button7_button = ~buttons7;
        io_led[16+7+0-:1] = M_button7_count;
        M_enterbutton_button = ~enterbuttons;
        sol = (M_button0_count) + (M_button1_count << 1'h1) + (M_button2_count << 2'h2) + (M_button3_count << 2'h3) + (M_button4_count << 3'h4) + (M_button5_count << 3'h5) + (M_button6_count << 3'h6) + (M_button7_count << 3'h7);
        if (sol == alu) begin
          M_states_d = LEVEL_states;
        end
        
        case (M_level_q)
          ONE_level: begin
            M_timingCounter1_rst = 1'h0;
            M_digitst_value = 6'h28 - M_timingCounter1_value;
            M_msegt_values = M_digitst_digits;
            timer_seg = M_msegt_seg;
            timer_sel = ~M_msegt_sel;
            if (M_timingCounter1_value == 6'h28) begin
              M_states_d = SCORE_states;
            end
          end
          TWO_level: begin
            M_timingCounter2_rst = 1'h0;
            M_digitst_value = 5'h1e - M_timingCounter2_value;
            M_msegt_values = M_digitst_digits;
            timer_seg = M_msegt_seg;
            timer_sel = ~M_msegt_sel;
            if (M_timingCounter2_value == 5'h1e) begin
              M_states_d = SCORE_states;
            end
          end
          THREE_level: begin
            M_timingCounter2_rst = 1'h0;
            M_digitst_value = 5'h1e - M_timingCounter2_value;
            M_msegt_values = M_digitst_digits;
            timer_seg = M_msegt_seg;
            timer_sel = ~M_msegt_sel;
            if (M_timingCounter2_value == 5'h1e) begin
              M_states_d = SCORE_states;
            end
          end
          FOUR_level: begin
            M_timingCounter3_rst = 1'h0;
            M_digitst_value = 5'h14 - M_timingCounter3_value;
            M_msegt_values = M_digitst_digits;
            timer_seg = M_msegt_seg;
            timer_sel = ~M_msegt_sel;
            if (M_timingCounter3_value == 5'h14) begin
              M_states_d = SCORE_states;
            end
          end
          FIVE_level: begin
            M_timingCounter4_rst = 1'h0;
            M_digitst_value = 4'hf - M_timingCounter4_value;
            M_msegt_values = M_digitst_digits;
            timer_seg = M_msegt_seg;
            timer_sel = ~M_msegt_sel;
            if (M_timingCounter4_value == 4'hf) begin
              M_states_d = SCORE_states;
            end
          end
          SIX_level: begin
            M_states_d = OVER_states;
          end
        endcase
        if (M_resetbutton_count) begin
          M_states_d = BEGIN_states;
          M_resetbutton_rst = 1'h1;
        end
      end
      IDLE_states: begin
        if (M_enterbutton_count) begin
          M_enterbutton_rst = 1'h1;
          M_states_d = START_states;
          M_rngesus_seed = M_rngesus_num[0+31-:32];
          M_rngesus_next = 1'h1;
        end
        if (M_resetbutton_count) begin
          M_states_d = BEGIN_states;
          M_resetbutton_rst = 1'h1;
        end
      end
      LEVEL_states: begin
        if (M_level_q == ONE_level) begin
          M_level_d = TWO_level;
          M_states_d = IDLE_states;
        end else begin
          if (M_level_q == SIX_level) begin
            M_states_d = OVER_states;
          end else begin
            if (M_level_q == FIVE_level) begin
              M_level_d = SIX_level;
            end else begin
              if (M_level_q == FOUR_level) begin
                M_level_d = FIVE_level;
                M_states_d = IDLE_states;
              end else begin
                if (M_level_q == THREE_level) begin
                  M_level_d = FOUR_level;
                  M_states_d = IDLE_states;
                end else begin
                  if (M_level_q == TWO_level) begin
                    M_level_d = THREE_level;
                    M_states_d = IDLE_states;
                  end
                end
              end
            end
          end
        end
      end
      SCORE_states: begin
        if (M_hp_q == ONE_hp) begin
          M_states_d = OVER_states;
        end else begin
          if (M_hp_q == EIGHT_hp) begin
            M_hp_d = SEVEN_hp;
            M_states_d = IDLE_states;
          end else begin
            if (M_hp_q == SEVEN_hp) begin
              M_hp_d = SIX_hp;
              M_states_d = IDLE_states;
            end else begin
              if (M_hp_q == SIX_hp) begin
                M_hp_d = FIVE_hp;
                M_states_d = IDLE_states;
              end else begin
                if (M_hp_q == FIVE_hp) begin
                  M_hp_d = FOUR_hp;
                  M_states_d = IDLE_states;
                end else begin
                  if (M_hp_q == FOUR_hp) begin
                    M_hp_d = THREE_hp;
                    M_states_d = IDLE_states;
                  end else begin
                    if (M_hp_q == THREE_hp) begin
                      M_hp_d = TWO_hp;
                      M_states_d = IDLE_states;
                    end else begin
                      if (M_hp_q == TWO_hp) begin
                        M_hp_d = ONE_hp;
                        M_states_d = IDLE_states;
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      OVER_states: begin
        io_led[0+7-:8] = 8'hff;
        io_led[8+7-:8] = 8'hff;
        io_led[16+7-:8] = 8'hff;
        if (M_resetbutton_count) begin
          M_resetbutton_rst = 1'h1;
          M_level_d = ONE_level;
          M_hp_d = EIGHT_hp;
          M_states_d = BEGIN_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_states_q <= 1'h0;
      M_hp_q <= 1'h0;
      M_level_q <= 1'h0;
    end else begin
      M_states_q <= M_states_d;
      M_hp_q <= M_hp_d;
      M_level_q <= M_level_d;
    end
  end
  
endmodule
