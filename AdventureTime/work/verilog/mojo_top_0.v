/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam BEGIN_states = 2'd0;
  localparam START_states = 2'd1;
  localparam IDLE_states = 2'd2;
  localparam SCORE_states = 2'd3;
  
  reg [1:0] M_states_d, M_states_q = BEGIN_states;
  wire [32-1:0] M_rngesus_num;
  reg [1-1:0] M_rngesus_next;
  reg [32-1:0] M_rngesus_seed;
  pn_gen_2 rngesus (
    .clk(clk),
    .rst(rst),
    .next(M_rngesus_next),
    .seed(M_rngesus_seed),
    .num(M_rngesus_num)
  );
  reg [7:0] M_hp_d, M_hp_q = 1'h0;
  wire [4-1:0] M_timingCounter_value;
  reg [1-1:0] M_timingCounter_rst;
  counter_3 timingCounter (
    .clk(clk),
    .rst(M_timingCounter_rst),
    .value(M_timingCounter_value)
  );
  
  wire [8-1:0] M_seg_segs;
  reg [4-1:0] M_seg_char;
  sevenseg_4 seg (
    .dot(1'h0),
    .char(M_seg_char),
    .segs(M_seg_segs)
  );
  
  reg [7:0] alu;
  
  wire [8-1:0] M_alu1_alu;
  wire [1-1:0] M_alu1_z;
  wire [1-1:0] M_alu1_v;
  wire [1-1:0] M_alu1_n;
  wire [1-1:0] M_alu1_subtractionOverFLow;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  main_5 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu(M_alu1_alu),
    .z(M_alu1_z),
    .v(M_alu1_v),
    .n(M_alu1_n),
    .subtractionOverFLow(M_alu1_subtractionOverFLow)
  );
  
  reg [7:0] p;
  
  always @* begin
    M_states_d = M_states_q;
    M_hp_d = M_hp_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_rngesus_seed = 1'h0;
    M_rngesus_next = 1'h0;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_timingCounter_rst = 1'h1;
    M_seg_char = 1'h0;
    io_seg = ~M_seg_segs;
    M_hp_d = 8'hff;
    io_sel = 4'he;
    io_led[0+7-:8] = M_hp_q;
    alu = M_alu1_alu;
    p = io_dip[8+7-:8];
    if (M_states_q == BEGIN_states) begin
      if (io_button[1+0-:1]) begin
        M_states_d = START_states;
      end
    end else begin
      if (M_states_q == START_states) begin
        M_timingCounter_rst = 1'h0;
        M_seg_char = 4'h8 - M_timingCounter_value;
        io_led[0+7-:8] = M_hp_q;
        
        case (M_rngesus_num[16+1-:2])
          2'h1: begin
            M_alu1_alufn = 6'h02;
            M_alu1_a = M_rngesus_num[0+3-:4];
            M_alu1_b = M_rngesus_num[4+3-:4];
          end
          2'h0: begin
            M_alu1_alufn = 6'h00;
            M_alu1_a = M_rngesus_num[0+7-:8];
            M_alu1_b = M_rngesus_num[8+7-:8];
          end
          2'h1: begin
            if (M_rngesus_num[0+7-:8] < M_rngesus_num[8+7-:8]) begin
              M_alu1_alufn = 6'h01;
              M_alu1_a = M_rngesus_num[8+7-:8];
              M_alu1_b = M_rngesus_num[0+7-:8];
            end else begin
              M_alu1_alufn = 6'h01;
              M_alu1_a = M_rngesus_num[8+7-:8];
              M_alu1_b = M_rngesus_num[0+7-:8];
            end
          end
          default: begin
            M_alu1_alufn = 6'h00;
            M_alu1_a = M_rngesus_num[0+6-:7];
            M_alu1_b = M_rngesus_num[7+6-:7];
          end
        endcase
        if (p == alu && io_dip[16+0+0-:1] == 1'h1) begin
          M_states_d = IDLE_states;
        end else begin
          if (p != alu && io_dip[16+0+0-:1] == 1'h1) begin
            M_states_d = SCORE_states;
          end else begin
            if (M_timingCounter_value == 4'h9) begin
              M_states_d = SCORE_states;
            end
          end
        end
      end else begin
        if (M_states_q == IDLE_states) begin
          led[1+0-:1] = 1'h1;
          io_led[0+7-:8] = M_hp_q;
          if (io_button[2+0-:1]) begin
            M_states_d = START_states;
            M_rngesus_next = 1'h1;
          end
        end else begin
          if (M_states_q == SCORE_states) begin
            led[2+0-:1] = 1'h1;
            if (io_button[3+0-:1]) begin
              M_hp_d = M_hp_q >> 1'h1;
              M_states_d = START_states;
              M_rngesus_next = 1'h1;
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_hp_q <= 1'h0;
      M_states_q <= 1'h0;
    end else begin
      M_hp_q <= M_hp_d;
      M_states_q <= M_states_d;
    end
  end
  
endmodule
