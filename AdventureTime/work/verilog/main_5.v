/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module main_5 (
    input [5:0] alufn,
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] alu,
    output reg z,
    output reg v,
    output reg n,
    output reg subtractionOverFLow
  );
  
  
  
  wire [8-1:0] M_add_totalSum;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  wire [1-1:0] M_add_subtractionOverflow;
  reg [6-1:0] M_add_alufn;
  reg [8-1:0] M_add_a;
  reg [8-1:0] M_add_b;
  adder_6 add (
    .alufn(M_add_alufn),
    .a(M_add_a),
    .b(M_add_b),
    .totalSum(M_add_totalSum),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n),
    .subtractionOverflow(M_add_subtractionOverflow)
  );
  
  wire [8-1:0] M_com_cmpFinal;
  reg [6-1:0] M_com_alufn;
  reg [1-1:0] M_com_z;
  compare_7 com (
    .alufn(M_com_alufn),
    .z(M_com_z),
    .cmpFinal(M_com_cmpFinal)
  );
  
  wire [8-1:0] M_multi_mulFinal;
  reg [8-1:0] M_multi_a;
  reg [8-1:0] M_multi_b;
  reg [6-1:0] M_multi_alufn;
  multiply_8 multi (
    .a(M_multi_a),
    .b(M_multi_b),
    .alufn(M_multi_alufn),
    .mulFinal(M_multi_mulFinal)
  );
  
  wire [8-1:0] M_shift_shifterResult;
  reg [6-1:0] M_shift_alufn;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  shifter_9 shift (
    .alufn(M_shift_alufn),
    .a(M_shift_a),
    .b(M_shift_b),
    .shifterResult(M_shift_shifterResult)
  );
  
  wire [8-1:0] M_boo_booleanFinal;
  reg [6-1:0] M_boo_alufn;
  reg [8-1:0] M_boo_a;
  reg [8-1:0] M_boo_b;
  boolean_10 boo (
    .alufn(M_boo_alufn),
    .a(M_boo_a),
    .b(M_boo_b),
    .booleanFinal(M_boo_booleanFinal)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn;
    M_com_alufn = alufn;
    M_com_z = M_add_z;
    M_shift_alufn = alufn;
    M_shift_a = a;
    M_shift_b = b;
    M_boo_alufn = alufn;
    M_boo_a = a;
    M_boo_b = b;
    M_multi_alufn = alufn;
    M_multi_a = a;
    M_multi_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        if (alufn[1+0-:1]) begin
          alu = M_multi_mulFinal;
        end else begin
          alu = M_add_totalSum;
        end
      end
      2'h1: begin
        alu = M_boo_booleanFinal;
      end
      2'h2: begin
        alu = M_shift_shifterResult;
      end
      2'h3: begin
        alu = M_com_cmpFinal;
      end
      default: begin
        alu = 8'h00;
      end
    endcase
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
    subtractionOverFLow = M_add_subtractionOverflow;
  end
endmodule
